service: serverless-application

provider:
  name: aws
  runtime: nodejs6.10
  #role:
  versionFunctions: false

custom:
  s3bucketname: Haedlight-CustomerProfile
  stackName: Headlight-Consultant-Profile
  stage: dev
  region: eu-west-1
  accountId: "343236483212"


package:
  excludeDevDependencies: false

functions:
  generateimage:
    handler: lambda/generate-image/index.handler
    environment:
      S3BucketName: ${self:custom.s3bucketname}
      DynamoDBTableName:
        Ref: DynamoDBTable
    events:
      - stream:
          type: dynamodb
          batchSize: 10
          startingPosition: TRIM_HORIZON
          arn:
            Fn::GetAtt: [DynamoDBTable, StreamArn]
  listdynamodb:
    role: ListDynamoDBRole
    handler: lambda/list-dynamodb/index.handler
    environment:
      DynamoDBTableName:
        Ref: DynamoDBTable
    events:
      - http:
          path: /items
          method: GET
  putdynamodb:
    role: PutDynamoDBRole
    handler: lambda/put-dynamodb/index.handler
    environment:
      DynamoDBTableName:
        Ref: DynamoDBTable
    events:
      - http:
          path: /items/{id}
          method: PUT
  postdynamodb:
    role: PutDynamoDBRole
    handler: lambda/post-dynamodb/index.handler
    environment:
      DynamoDBTableName:
        Ref: DynamoDBTable
    events:
      - http:
          path: /items/{id}
          method: POST
resources:
  Resources:
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    GenerateImageRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: GenerateImageRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          -
            PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:*
                  Resource:
                    Fn::GetAtt: [DynamoDBTable, StreamArn]
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    Fn::Sub: 'arn:aws:s3:::${self:custom.s3bucketname}/*'
                - Effect: Allow
                  Action:
                    - dynamodb:*
                  Resource:
                    Fn::GetAtt: [DynamoDBTable, Arn]
    ListDynamoDBRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ListDynamoDBRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          -
            PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Scan
                  Resource:
                    Fn::GetAtt: [DynamoDBTable, Arn]
    PublishsnsLambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
          FunctionName:
            Fn::GetAtt: [GenerateimageLambdaFunction, Arn]
          Principal: "s3.amazonaws.com"
          Action: "lambda:InvokeFunction"
          SourceAccount:
            Ref: AWS::AccountId
          SourceArn: "arn:aws:s3:::${self:custom.s3bucketname}"
    PutDynamoDBRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: PutDynamoDBRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          -
            PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:UpdateItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    Fn::GetAtt: [DynamoDBTable, Arn]
